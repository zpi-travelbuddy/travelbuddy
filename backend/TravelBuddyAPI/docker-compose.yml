services:
  sqlserver:
    build:
      context: .
      dockerfile: Dockerfile.sqlserver
    container_name: sql-server-container
    ports:
      - "1433:1433"
    volumes:
      - sqlserverdata:/var/opt/mssql
    networks:
      - travelbuddynetwork
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P \"$MSSQL_SA_PASSWORD\" -C -Q \"SELECT 1\" > /dev/null || exit 1"]
      interval: 10s
      retries: 10
      start_period: 30s

  travelbuddyapi:
    build: 
      context: .
      dockerfile: Dockerfile.api
    container_name: travel-buddy-api-container
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - GEOAPIFY_KEY=${GEOAPIFY_KEY}
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - COGNITO_AUTHORITY=${COGNITO_AUTHORITY}
      - COGNITO_AUDIENCE=${COGNITO_AUDIENCE}
    ports:
      - "8080:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - travelbuddynetwork

  db-init:
    image: mcr.microsoft.com/mssql-tools:latest
    container_name: db-init-container
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
    networks:
      - travelbuddynetwork
    volumes:
      - ./init-db.sql:/init-db.sql
    entrypoint: [
      "sh", "-c",
      "until /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P \"$MSSQL_SA_PASSWORD\" -C -d master -i /init-db.sql; do echo 'Waiting for SQL Server to be ready...'; sleep 5; done;"
    ]

networks:
  travelbuddynetwork:
    driver: bridge

volumes:
  sqlserverdata: